plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id "org.asciidoctor.jvm.convert" version "3.3.2" // (1)
}

group = 'web'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor' // (3)
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc' // (4)

	/* jwt */
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	implementation 'commons-codec:commons-codec:1.13'
	implementation 'com.auth0:java-jwt:3.13.0'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	runtimeOnly 'com.mysql:mysql-connector-j'
//	runtimeOnly 'com.h2database:h2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	implementation 'org.modelmapper:modelmapper:3.2.0'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
}

ext {
	snippetsDir = file('build/generated-snippets') // (5)
}

tasks.named('test') {
	useJUnitPlatform()
	outputs.dir snippetsDir // (6)
}

asciidoctor {
	configurations 'asciidoctorExt' // (7)
	sources{
		include("**/index.adoc")
	}
	baseDirFollowsSourceFile() // 여러 문서를 include 할 때 경로를 찾아주는 코드
	inputs.dir snippetsDir // (9)
	dependsOn test // (10)
}

asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')  // (11)
}

task copyDocument(type: Copy) { // (12)
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}

bootJar {
	dependsOn asciidoctor
	from ("${asciidoctor.outputDir}") {//asciidoc 조각을 html로 변환 후 서버를 실행하여 API를 공유하기 위함
		into 'static/docs'
	}
}